name: Truffle

permissions:
  contents: read

env:
  K_SOUP_COV_DO: false

on:
  push:
    branches:
      - 'main'
      - '*-stable'
    tags:
      - '!*' # Do not execute on tags
  pull_request:
    branches:
      - '*'
  # Allow manually triggering the workflow.
  workflow_dispatch:

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  test:
    if: "!contains(github.event.commits[0].message, '[ci skip]') && !contains(github.event.commits[0].message, '[skip ci]')"
    name: Specs ${{ matrix.ruby }} ${{ matrix.appraisal }}${{ matrix.name_extra || '' }}
    runs-on: ubuntu-22.04
    continue-on-error: ${{ matrix.experimental || endsWith(matrix.ruby, 'head') }}
    env: # $BUNDLE_GEMFILE must be set at job level, so it is set for all steps
      BUNDLE_GEMFILE: ${{ github.workspace }}/${{ matrix.gemfile }}.gemfile
    strategy:
      matrix:
        include:
          # NOTE: truffleruby does not support upgrading rubygems.
          # truffleruby-23.1 (targets Ruby 3.1 compatibility)
          - ruby: "truffleruby-23.1"
            appraisal: "ar-7-1-r3.1"
            exec_cmd: "rake spec:orm:active_record"
            gemfile: "Appraisal.root"
            rubygems: default
            bundler: default

#          # NOTE: When running the following, we get a SyntaxError in dry-types:
#          #
#          #    While loading ./spec_orms/rom_spec.rb a `raise SyntaxError` occurred, RSpec will now quit.
#          #    Failure/Error: required = zeitwerk_original_require(path)
#          #
#          #    SyntaxError:
#          #      /home/runner/.rubies/truffleruby-23.1.2/lib/gems/gems/dry-types-1.8.3/lib/dry/types/errors.rb:59: syntax error, unexpected '='
#          - ruby: "truffleruby-23.1"
#            appraisal: "rom-r3.1"
#            exec_cmd: "rake spec:orm:rom"
#            gemfile: "Appraisal.root"
#            rubygems: default
#            bundler: default

    steps:
      - name: Checkout
        if: ${{ (env.ACT && !(startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) || (!env.ACT && (startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) }}
        uses: actions/checkout@v5

      - name: Setup Ruby & RubyGems
        if: ${{ (env.ACT && !(startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) || (!env.ACT && (startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          rubygems: ${{ matrix.rubygems }}
          bundler: ${{ matrix.bundler }}
          bundler-cache: false

      # Raw `bundle` will use the BUNDLE_GEMFILE set to matrix.gemfile (i.e. Appraisal.root)
      # We need to do this first to get appraisal installed.
      # NOTE: This does not use the primary Gemfile at all.
      - name: Install Root Appraisal
        if: ${{ (env.ACT && !(startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) || (!env.ACT && (startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) }}
        run: bundle

      - name: "[Attempt 1] Install Root Appraisal"
        id: bundleAttempt1
        if: ${{ (env.ACT && !(startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) || (!env.ACT && (startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) }}
        run: bundle
        # Continue to the next step on failure
        continue-on-error: true

      # Effectively an automatic retry of the previous step.
      - name: "[Attempt 2] Install Root Appraisal"
        id: bundleAttempt2
        # If bundleAttempt1 failed, try again here; Otherwise skip.
        if: ${{ steps.bundleAttempt1.outcome == 'failure' && (env.ACT && !(startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) || (!env.ACT && (startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) }}
        run: bundle

      - name: "[Attempt 1] Appraisal for ${{ matrix.ruby }}@${{ matrix.appraisal }}"
        id: bundleAppraisalAttempt1
        if: ${{ (env.ACT && !(startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) || (!env.ACT && (startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) }}
        run: bundle exec appraisal ${{ matrix.appraisal }} bundle
        # Continue to the next step on failure
        continue-on-error: true

      # Effectively an automatic retry of the previous step.
      - name: "[Attempt 2] Appraisal for ${{ matrix.ruby }}@${{ matrix.appraisal }}"
        id: bundleAppraisalAttempt2
        # If bundleAppraisalAttempt1 failed, try again here; Otherwise skip.
        if: ${{ steps.bundleAppraisalAttempt1.outcome == 'failure' && (env.ACT && !(startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) || (!env.ACT && (startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) }}
        run: bundle exec appraisal ${{ matrix.appraisal }} bundle

      - name: Tests for ${{ matrix.ruby }} via ${{ matrix.exec_cmd }}
        if: ${{ (env.ACT && !(startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) || (!env.ACT && (startsWith(matrix.ruby, 'jruby')) || startsWith(matrix.ruby, 'truffleruby')) }}
        run: bundle exec appraisal ${{ matrix.appraisal }} bundle exec ${{ matrix.exec_cmd }}
